version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hosting-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pterodactyl_cp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - hosting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hosting-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    networks:
      - hosting-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Control Plane API
  control-plane:
    build:
      context: ../control-plane
      dockerfile: Dockerfile
    container_name: hosting-control-plane
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-pterodactyl_cp}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-changeme}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-changeme}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-changeme}
      PTERODACTYL_URL: ${PTERODACTYL_URL:-https://panel.example.com}
      PTERODACTYL_API_KEY: ${PTERODACTYL_API_KEY:-changeme}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://cp.example.com}
    volumes:
      - control_plane_uploads:/app/uploads
      - control_plane_logs:/app/logs
    networks:
      - hosting-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Portal
  web-portal:
    build:
      context: ../web-portal
      dockerfile: Dockerfile
    container_name: hosting-web-portal
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://cp.example.com}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-wss://cp.example.com}
    volumes:
      - web_portal_cache:/app/.next/cache
    networks:
      - hosting-network
    depends_on:
      - control-plane
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hosting-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - letsencrypt_certs:/etc/letsencrypt:ro
      - letsencrypt_www:/var/www/certbot:ro
    networks:
      - hosting-network
    depends_on:
      - control-plane
      - web-portal

  # Certbot for Let's Encrypt
  certbot:
    image: certbot/certbot
    container_name: hosting-certbot
    restart: "no"
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  control_plane_uploads:
    driver: local
  control_plane_logs:
    driver: local
  web_portal_cache:
    driver: local
  nginx_logs:
    driver: local
  letsencrypt_certs:
    driver: local
  letsencrypt_www:
    driver: local

networks:
  hosting-network:
    driver: bridge